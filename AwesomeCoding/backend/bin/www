#!/usr/bin/env node
// *** 后端入口文件 ***
/**
 * Module dependencies.
 */

var {app, server} = require('../app');
var debug = require('debug')('myapp:server');
var host_config = {port:80,ip:'localhost'};
var session_cfg = require('../configures/session.config');
var session = require("express-session");


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || host_config.port);
app.set('port', port);

/**
 * Create HTTP server.
 */


// create socket.io

// shared-session with io
/*
var shared_session = require("express-socket.io-session");
io.use(shared_session(session, {
	autoSave: true
}));
*/

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
	console.log('Server started at: http://%s:%s/', host_config.ip, port);   // 启动时显示链接
}
